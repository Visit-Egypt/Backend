name: Tests
on: [push]



jobs:
  test:
    name: Run Python Tests
    runs-on: ubuntu-latest

    steps:

    - uses: actions/checkout@v2

    - name: Setup timezone
      uses: zcong1993/setup-timezone@master
      with:
        timezone: UTC

    - name: Set up Python 3.10.2
      uses: actions/setup-python@v2
      with:
        python-version: 3.10.2

    - name: Install Python dependencies
      run: |
        sudo apt install -y $(grep -o ^[^#][[:alnum:]-]* "packages.list")
        python3 -m pip install --upgrade pip
        pip3 install -r requirements.txt
        # python -m spacy download en_core_web_sm
        # python -m spacy download en
        
    - name: Test with pytest
      run: |
        echo "Testing Placeholder"
  BuildDocker:
    needs: [test]
    if: github.ref == 'refs/heads/master' 
    runs-on: ubuntu-latest
    steps:
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: visitegypt/backend:latest

  DeployToServer:
    needs: [test, BuildDocker]
    if: github.ref == 'refs/heads/master'
    # if: false
    runs-on: ubuntu-latest
    steps:
      - name: Deploy docker container to the erver
        uses: fifsky/ssh-action@master
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_NOTIFICATION_PLATFORM_ARN: ${{ secrets.AWS_NOTIFICATION_PLATFORM_ARN }}
          AWS_NOTIFICATION_TOPIC_ARN: ${{ secrets.AWS_NOTIFICATION_TOPIC_ARN }}
          AWS_REGION_NAME: ${{ secrets.AWS_REGION_NAME }}
          AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          DB_CONNECTION: ${{ secrets.DB_CONNECTION }}
          DB_NAME: ${{secrets.DB_NAME}}
          MAIL_FROM: ${{ secrets.MAIL_FROM }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
          MAX_CONNECTIONS_COUNT: ${{ secrets.MAX_CONNECTIONS_COUNT }}
          MIN_CONNECTIONS_COUNT: ${{ secrets.MIN_CONNECTIONS_COUNT }}
          PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
          SECRET_KEY:  ${{ secrets.SECRET_KEY }}
          APM_SERVICE_NAME: ${{ secrets.APM_SERVICE_NAME }}
          APM_SERVER_URL: ${{ secrets.APM_SERVER_URL }}
          APM_SERVER_TOKEN: ${{ secrets.APM_SERVER_TOKEN }}
          ELK_ENABLED: ${{ secrets.ELK_ENABLED }}
          API_HOST: ${{ secrets.API_HOST }}
          CHAT_BOT_SERVICE_URL: ${{ secrets.CHAT_BOT_SERVICE_URL }}
        with:
          command: |
            sudo rm -f $HOME/.env
            
            echo "MAX_CONNECTIONS_COUNT=${{ env.MAX_CONNECTIONS_COUNT }}" >> $HOME/.env
            echo "MIN_CONNECTIONS_COUNT=${{ env.MIN_CONNECTIONS_COUNT }}" >> $HOME/.env
            echo "AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }}" >> $HOME/.env
            echo "AWS_DEFAULT_REGION=${{ env.AWS_DEFAULT_REGION }}" >> $HOME/.env
            echo "AWS_NOTIFICATION_PLATFORM_ARN=${{ env.AWS_NOTIFICATION_PLATFORM_ARN }}" >> $HOME/.env
            echo "AWS_NOTIFICATION_TOPIC_ARN=${{ env.AWS_NOTIFICATION_TOPIC_ARN }}" >> $HOME/.env
            echo "AWS_REGION_NAME=${{ env.AWS_REGION_NAME }}" >> $HOME/.env
            echo "AWS_S3_BUCKET_NAME=${{ env.AWS_S3_BUCKET_NAME }}" >> $HOME/.env
            echo "AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }}" >> $HOME/.env
            echo "CLIENT_ID=${{ env.CLIENT_ID }}" >> $HOME/.env
            echo "DB_CONNECTION=${{ env.DB_CONNECTION }}" >> $HOME/.env
            echo "DB_NAME=${{ env.DB_NAME }}" >> $HOME/.env
            echo "MAIL_FROM=${{ env.MAIL_FROM }}" >> $HOME/.env
            echo "MAIL_PASSWORD=${{ env.MAIL_PASSWORD }}" >> $HOME/.env
            echo "MAIL_USERNAME=${{ env.MAIL_USERNAME }}" >> $HOME/.env
            echo "PROJECT_NAME="${{ env.PROJECT_NAME }}"" >> $HOME/.env
            echo "SECRET_KEY="${{ env.SECRET_KEY }}"" >> $HOME/.env
            echo "APM_SERVICE_NAME="${{ env.APM_SERVICE_NAME }}"" >> $HOME/.env
            echo "APM_SERVER_URL="${{ env.APM_SERVER_URL }}"" >> $HOME/.env
            echo "APM_SERVER_TOKEN="${{ env.APM_SERVER_TOKEN }}"" >> $HOME/.env
            echo "ELK_ENABLED="${{ env.ELK_ENABLED }}"" >> $HOME/.env
            echo "API_HOST="${{ env.API_HOST }}"" >> $HOME/.env
            echo "CHAT_BOT_SERVICE_URL="${{ env.CHAT_BOT_SERVICE_URL }}"" >> $HOME/.env
            sudo docker kill backend-container
            sudo docker rm backend-container
            sudo docker rmi $(sudo docker images -a -q)

            sudo docker run -d -p 80:80 --env-file $HOME/.env --name backend-container visitegypt/backend:latest
          host: ${{ secrets.HOST }}
          user: ${{ secrets.HOST_USERNAME }}
          key: ${{ secrets.PRIVATE_KEY}}
  deploy:
    # If the test & lint jobs don't pass,
    # the deploy job willn't even execute
    needs: [test]
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Deploying to Heroku
        # More details available at:
        # https://github.com/akhileshns/heroku-deploy
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key:  ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: "visit-egypt"
          heroku_email: "geekahmed1@gmail.com"
          healthcheck: "https://visit-egypt.herokuapp.com/api/status"
          rollbackonhealthcheckfailed: true
